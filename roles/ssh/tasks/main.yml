- name: Check if there's authorized_keys
  stat:
    path: /home/{{ username }}/.ssh/authorized_keys
  register: authorized_keys

- name: Generate and install a public key pair
  when: (not authorized_keys.stat.exists) or (authorized_keys.stat.size == 0)
  block:
    - name: Install cryptography
      pip:
        name: cryptography
        state: latest

    - name: Generate an SSH key pair
      openssh_keypair:
        path: /tmp/id_ssh_ed25519
        type: ed25519
        passphrase: "{{ password }}"

    - name: Create the SSH directory
      file:
        path: "/home/{{ username }}/.ssh"
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: 700

    - name: Install the public key
      copy:
        src: /tmp/id_ssh_ed25519.pub
        dest: "/home/{{ username }}/.ssh/authorized_keys"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: 600

- name: Update SSH configuration to be more secure
  lineinfile:
    dest: "/etc/ssh/sshd_config"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
    validate: "sshd -T -f %s"
    mode: 0644
  with_items:
    - regexp: "^PasswordAuthentication"
      line: "PasswordAuthentication no"
    - regexp: "^PermitRootLogin"
      line: "PermitRootLogin no"
    - regexp: "^Port"
      line: "Port {{ ssh_port }}"
    - regexp: "^PermitEmptyPasswords"
      line: "PermitEmptyPasswords no"
    - regexp: "^X11Forwarding"
      line: "X11Forwarding no"
